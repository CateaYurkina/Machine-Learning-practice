{"cells":[{"cell_type":"markdown","metadata":{"id":"-xTqJBDYjEc5"},"source":["## Домашнее задание №7\n","\n","##### Автор: [Радослав Нейчев](https://www.linkedin.com/in/radoslav-neychev/), @neychev"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"K50SsfkvjEc_"},"outputs":[],"source":["import numpy as np\n","\n","import torch\n","from torch import nn\n","from torch.nn import functional as F\n","\n","import torchvision\n","from torchvision.datasets import MNIST\n","\n","from matplotlib import pyplot as plt\n","from IPython.display import clear_output"]},{"cell_type":"markdown","metadata":{"id":"Bbg8sSSzjEdC"},"source":["### Задача №1:\n","Обратимся к классической задаче распознавания рукописных цифр. Мы будем работать с набором данных [MNIST](http://yann.lecun.com/exdb/mnist/). В данном задании воспользуемся всем датасетом целиком.\n","\n","__Ваша основная задача: реализовать весь пайплан обучения модели и добиться качества $\\geq 92\\%$ на тестовой выборке.__\n","\n","Код для обучения модели в данном задании отсутствует. Присутствует лишь несколько тестов, которые помогут вам отладить свое решение. За примером можно обратиться к ноутбуку первого занятия.\n","\n","Настоятельно рекомендуем написать код \"с нуля\", лишь поглядывая на готовые примеры, а не просто \"скопировать-вставить\". Это поможет вам в дальнейшем."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":470},"id":"EMfsu-VpjEdE","executionInfo":{"status":"ok","timestamp":1753381746985,"user_tz":-180,"elapsed":433,"user":{"displayName":"Ekaterina Yurkina","userId":"00323084364712549389"}},"outputId":"6a3a69e6-6e3c-4496-a68f-fce626fce0a1"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0.5, 1.0, 'Image label: 3')"]},"metadata":{},"execution_count":55},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["# do not change the code in the block below\n","# __________start of block__________\n","\n","train_mnist_data = MNIST('.', train=True, transform=torchvision.transforms.ToTensor(), download=True)\n","test_mnist_data = MNIST('.', train=False, transform=torchvision.transforms.ToTensor(), download=True)\n","\n","\n","train_data_loader = torch.utils.data.DataLoader(\n","    train_mnist_data,\n","    batch_size=32,\n","    shuffle=True,\n","    num_workers=2\n",")\n","\n","test_data_loader = torch.utils.data.DataLoader(\n","    test_mnist_data,\n","    batch_size=32,\n","    shuffle=False,\n","    num_workers=2\n",")\n","\n","random_batch = next(iter(train_data_loader))\n","_image, _label = random_batch[0][0], random_batch[1][0]\n","plt.figure()\n","plt.imshow(_image.reshape(28, 28))\n","plt.title(f'Image label: {_label}')\n","# __________end of block__________"]},{"cell_type":"markdown","metadata":{"id":"wcu94SoJjEdF"},"source":["Постройте модель ниже. Пожалуйста, не стройте переусложненную сеть, не стоит делать ее глубже четырех слоев (можно и меньше). Ваша основная задача – обучить модель и получить качество на отложенной (тестовой выборке) не менее 92% accuracy.\n","\n","*Комментарий: для этого достаточно линейных слоев и функций активации.*\n","\n","__Внимание, ваша модель должна быть представлена именно переменной `model`.__"]},{"cell_type":"code","source":["class MyNM:\n","  def __init__(self, X=[]):\n","      pass\n","  def fit(self, X, y):\n","    self.X_train = X\n","    self.y_train = y\n","  def predict(self, X):\n","    return self.y_predict"],"metadata":{"id":"683Bg3lqoyuX"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# def MyNM(X):\n","\n","#   y_predict = []\n","#   return y_predict"],"metadata":{"id":"4XZ-hnGdpPqQ"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"BVSuuCDNjEdG"},"outputs":[],"source":["# Creating model instance\n","model = nn.Sequential(\n","    nn.Linear(784, 128),   # Первый слой: вход 784 (например, изображение 28x28), 128 нейронов\n","    nn.ReLU(),             # Функция активации\n","    nn.Linear(128, 64),    # Второй слой\n","    nn.ReLU(),\n","    nn.Linear(64, 10)       # Выходной слой: 10 классов (например, для классификации MNIST)\n",")\n"]},{"cell_type":"markdown","metadata":{"id":"CGm5ZAu7jEdH"},"source":["Локальные тесты для проверки вашей модели доступны ниже:"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"48Oytw9PjEdI","executionInfo":{"status":"ok","timestamp":1753382054519,"user_tz":-180,"elapsed":27,"user":{"displayName":"Ekaterina Yurkina","userId":"00323084364712549389"}},"outputId":"c9e1740e-4815-47fb-a3e0-f16c786b3875"},"outputs":[{"output_type":"stream","name":"stdout","text":["Everything seems fine!\n"]}],"source":["# do not change the code in the block below\n","# __________start of block__________\n","assert model is not None, 'Please, use `model` variable to store your model'\n","\n","try:\n","    x = random_batch[0].reshape(-1, 784)\n","    y = random_batch[1]\n","\n","    # compute outputs given inputs, both are variables\n","    y_predicted = model(x)\n","except Exception as e:\n","    print('Something is wrong with the model')\n","    raise e\n","\n","\n","assert y_predicted.shape[-1] == 10, 'Model should predict 10 logits/probas'\n","\n","print('Everything seems fine!')\n","# __________end of block__________"]},{"cell_type":"markdown","metadata":{"id":"bQoEV_rujEdJ"},"source":["Настройте параметры модели на обучающей выборке. Рекомендуем поработать с различными оптимизаторами."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2ERJPhJcjEdL","executionInfo":{"status":"ok","timestamp":1753382615450,"user_tz":-180,"elapsed":288476,"user":{"displayName":"Ekaterina Yurkina","userId":"00323084364712549389"}},"outputId":"f07ada88-d009-4fe8-ee05-f6a60c6ec557"},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/10, Loss: 0.0057797920890152454\n","Epoch 2/10, Loss: 0.0015934432158246636\n","Epoch 3/10, Loss: 0.023740272969007492\n","Epoch 4/10, Loss: 0.028947943821549416\n","Epoch 5/10, Loss: 0.0008389977738261223\n","Epoch 6/10, Loss: 0.002020246582105756\n","Epoch 7/10, Loss: 5.5312302720267326e-05\n","Epoch 8/10, Loss: 1.821338082663715e-05\n","Epoch 9/10, Loss: 0.001663340488448739\n","Epoch 10/10, Loss: 0.0001723827444948256\n","Epoch 1/10, Loss: 0.0008458555093966424\n","Epoch 2/10, Loss: 0.00021183464559726417\n","Epoch 3/10, Loss: 0.0006421744474209845\n","Epoch 4/10, Loss: 7.986468699527904e-05\n","Epoch 5/10, Loss: 0.0007195892976596951\n","Epoch 6/10, Loss: 3.556915544322692e-05\n","Epoch 7/10, Loss: 0.0005106203025206923\n","Epoch 8/10, Loss: 0.0009274351177737117\n","Epoch 9/10, Loss: 0.0010838204761967063\n","Epoch 10/10, Loss: 6.342568667605519e-05\n"]}],"source":["import torch.optim as optim\n","\n","# Выберите оптимизатор. Например:\n","optimizer = optim.SGD(model.parameters(), lr=0.01, momentum=0.9)\n","# Или попробуйте другой:\n","# optimizer = optim.Adam(model.parameters(), lr=0.001)\n","\n","# Выберите функцию потерь\n","criterion = nn.CrossEntropyLoss()\n","\n","# Обучающий цикл (пример)\n","num_epochs = 10\n","for epoch in range(num_epochs):\n","    for batch in train_data_loader:  # предполагается, что у вас есть DataLoader train_loader\n","        inputs, labels = batch\n","        # Обнуляем градиенты\n","        optimizer.zero_grad()\n","        # Проверка и подготовка данных\n","        inputs = inputs.reshape(-1, 784).float()\n","        # Прямой проход\n","        outputs = model(inputs)\n","        # Вычисляем потерю\n","        loss = criterion(outputs, labels)\n","        # Обратное распространение ошибки и обновление параметров\n","        loss.backward()\n","        optimizer.step()\n","\n","    print(f\"Epoch {epoch+1}/{num_epochs}, Loss: {loss.item()}\")\n","# Выберите оптимизатор. Например:\n","optimizer = optim.SGD(model.parameters(), lr=0.01, momentum=0.9)\n","# Или попробуйте другой:\n","# optimizer = optim.Adam(model.parameters(), lr=0.001)\n","\n","# Выберите функцию потерь\n","criterion = nn.CrossEntropyLoss()\n","\n","# Обучающий цикл (пример)\n","num_epochs = 10\n","for epoch in range(num_epochs):\n","    for batch in train_data_loader:  # предполагается, что у вас есть DataLoader train_loader\n","        inputs, labels = batch\n","        # Обнуляем градиенты\n","        optimizer.zero_grad()\n","        # Проверка и подготовка данных\n","        inputs = inputs.reshape(-1, 784).float()\n","        # Прямой проход\n","        outputs = model(inputs)\n","        # Вычисляем потерю\n","        loss = criterion(outputs, labels)\n","        # Обратное распространение ошибки и обновление параметров\n","        loss.backward()\n","        optimizer.step()\n","\n","    print(f\"Epoch {epoch+1}/{num_epochs}, Loss: {loss.item()}\")"]},{"cell_type":"markdown","metadata":{"id":"tDkabBHQjEdM"},"source":["Также, напоминаем, что в любой момент можно обратиться к замечательной [документации](https://pytorch.org/docs/stable/index.html) и [обучающим примерам](https://pytorch.org/tutorials/).  "]},{"cell_type":"markdown","metadata":{"id":"Ji4q77WwjEdN"},"source":["Оценим качество классификации:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"e4UJ0X4IjEdO"},"outputs":[],"source":["predicted_labels = []\n","real_labels = []\n","model.eval()\n","with torch.no_grad():\n","    for batch in train_data_loader:\n","        y_predicted = model(batch[0].reshape(-1, 784))\n","        predicted_labels.append(y_predicted.argmax(dim=1))\n","        real_labels.append(batch[1])\n","\n","predicted_labels = torch.cat(predicted_labels)\n","real_labels = torch.cat(real_labels)\n","train_acc = (predicted_labels == real_labels).type(torch.FloatTensor).mean()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lR8DRhDnjEdO","executionInfo":{"status":"ok","timestamp":1753382661041,"user_tz":-180,"elapsed":46,"user":{"displayName":"Ekaterina Yurkina","userId":"00323084364712549389"}},"outputId":"b8314c98-756a-43ed-932f-5884460dc0a5"},"outputs":[{"output_type":"stream","name":"stdout","text":["Neural network accuracy on train set: 1.0\n"]}],"source":["print(f'Neural network accuracy on train set: {train_acc:3.5}')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"6t2x4B4NjEdP"},"outputs":[],"source":["predicted_labels = []\n","real_labels = []\n","model.eval()\n","with torch.no_grad():\n","    for batch in test_data_loader:\n","        y_predicted = model(batch[0].reshape(-1, 784))\n","        predicted_labels.append(y_predicted.argmax(dim=1))\n","        real_labels.append(batch[1])\n","\n","predicted_labels = torch.cat(predicted_labels)\n","real_labels = torch.cat(real_labels)\n","test_acc = (predicted_labels == real_labels).type(torch.FloatTensor).mean()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LpLujmE_jEdQ","executionInfo":{"status":"ok","timestamp":1753382677259,"user_tz":-180,"elapsed":27,"user":{"displayName":"Ekaterina Yurkina","userId":"00323084364712549389"}},"outputId":"212d53b4-1b42-4df7-f8e4-38baf9c7ab30"},"outputs":[{"output_type":"stream","name":"stdout","text":["Neural network accuracy on test set: 0.9824\n"]}],"source":["print(f'Neural network accuracy on test set: {test_acc:3.5}')"]},{"cell_type":"markdown","metadata":{"id":"PyQe2IK5jEdQ"},"source":["Проверка, что необходимые пороги пройдены:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"oniSrEFLjEdR"},"outputs":[],"source":["assert test_acc >= 0.92, 'Test accuracy is below 0.92 threshold'\n","assert train_acc >= 0.91, 'Train accuracy is below 0.91 while test accuracy is fine. We recommend to check your model and data flow'"]},{"cell_type":"markdown","metadata":{"id":"G5E055mUjEdS"},"source":["### Сдача задания\n","Загрузите файл `hw07_data_dict.npy` (ссылка есть на странице с заданием) и запустите код ниже для генерации посылки. Код ниже может его загрузить (но в случае возникновения ошибки скачайте и загрузите его вручную)."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"SppU34NtjEdS"},"outputs":[],"source":["!wget https://raw.githubusercontent.com/girafe-ai/ml-course/23s_dd_ml/homeworks/hw07_mnist_classification/hw07_data_dict.npy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"NMkTsNhajEdS"},"outputs":[],"source":["# do not change the code in the block below\n","# __________start of block__________\n","import os\n","\n","assert os.path.exists('hw07_data_dict.npy'), 'Please, download `hw07_data_dict.npy` and place it in the working directory'\n","\n","def get_predictions(model, eval_data, step=10):\n","\n","    predicted_labels = []\n","    model.eval()\n","    with torch.no_grad():\n","        for idx in range(0, len(eval_data), step):\n","            y_predicted = model(eval_data[idx:idx+step].reshape(-1, 784))\n","            predicted_labels.append(y_predicted.argmax(dim=1))\n","\n","    predicted_labels = torch.cat(predicted_labels)\n","    return predicted_labels\n","\n","loaded_data_dict = np.load('hw07_data_dict.npy', allow_pickle=True)\n","\n","submission_dict = {\n","    'train': get_predictions(model, torch.FloatTensor(loaded_data_dict.item()['train'])).numpy(),\n","    'test': get_predictions(model, torch.FloatTensor(loaded_data_dict.item()['test'])).numpy()\n","}\n","\n","np.save('submission_dict_hw07.npy', submission_dict, allow_pickle=True)\n","print('File saved to `submission_dict_hw07.npy`')\n","# __________end of block__________"]},{"cell_type":"markdown","metadata":{"id":"S9wa1qwJjEdT"},"source":["На этом задание завершено. Поздравляем!"]}],"metadata":{"kernelspec":{"display_name":"Py3 Research","language":"python","name":"py3_research"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.10"},"colab":{"provenance":[{"file_id":"15nAuVVnFBpCkBOdjS7ITlMbW5efYLpPu","timestamp":1753382814209}]}},"nbformat":4,"nbformat_minor":0}